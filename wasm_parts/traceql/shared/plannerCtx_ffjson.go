// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: plannerCtx.go

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"time"
)

// MarshalJSON marshal bytes to json - template
func (j *PlannerContext) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *PlannerContext) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if j.IsCluster {
		buf.WriteString(`{"IsCluster":true`)
	} else {
		buf.WriteString(`{"IsCluster":false`)
	}
	buf.WriteString(`,"OrgID":`)
	fflib.WriteJsonString(buf, string(j.OrgID))
	buf.WriteString(`,"From":`)

	{

		obj, err = j.From.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"To":`)

	{

		obj, err = j.To.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"FromS":`)
	fflib.FormatBits2(buf, uint64(j.FromS), 10, j.FromS < 0)
	buf.WriteString(`,"ToS":`)
	fflib.FormatBits2(buf, uint64(j.ToS), 10, j.ToS < 0)
	if j.OrderASC {
		buf.WriteString(`,"OrderASC":true`)
	} else {
		buf.WriteString(`,"OrderASC":false`)
	}
	buf.WriteString(`,"Limit":`)
	fflib.FormatBits2(buf, uint64(j.Limit), 10, j.Limit < 0)
	buf.WriteString(`,"TimeSeriesGinTableName":`)
	fflib.WriteJsonString(buf, string(j.TimeSeriesGinTableName))
	buf.WriteString(`,"SamplesTableName":`)
	fflib.WriteJsonString(buf, string(j.SamplesTableName))
	buf.WriteString(`,"TimeSeriesTableName":`)
	fflib.WriteJsonString(buf, string(j.TimeSeriesTableName))
	buf.WriteString(`,"TimeSeriesDistTableName":`)
	fflib.WriteJsonString(buf, string(j.TimeSeriesDistTableName))
	buf.WriteString(`,"Metrics15sTableName":`)
	fflib.WriteJsonString(buf, string(j.Metrics15sTableName))
	buf.WriteString(`,"TracesAttrsTable":`)
	fflib.WriteJsonString(buf, string(j.TracesAttrsTable))
	buf.WriteString(`,"TracesAttrsDistTable":`)
	fflib.WriteJsonString(buf, string(j.TracesAttrsDistTable))
	buf.WriteString(`,"TracesTable":`)
	fflib.WriteJsonString(buf, string(j.TracesTable))
	buf.WriteString(`,"TracesDistTable":`)
	fflib.WriteJsonString(buf, string(j.TracesDistTable))
	if j.UseCache {
		buf.WriteString(`,"UseCache":true`)
	} else {
		buf.WriteString(`,"UseCache":false`)
	}
	buf.WriteString(`,"Ctx":`)
	/* Interface types must use runtime reflection. type=context.Context kind=interface */
	err = buf.Encode(j.Ctx)
	if err != nil {
		return err
	}
	buf.WriteString(`,"CancelCtx":`)
	/* Falling back. type=context.CancelFunc kind=func */
	err = buf.Encode(j.CancelCtx)
	if err != nil {
		return err
	}
	if j.CHFinalize {
		buf.WriteString(`,"CHFinalize":true`)
	} else {
		buf.WriteString(`,"CHFinalize":false`)
	}
	if j.CHSqlCtx != nil {
		/* Struct fall back. type=sql.Ctx kind=struct */
		buf.WriteString(`,"CHSqlCtx":`)
		err = buf.Encode(j.CHSqlCtx)
		if err != nil {
			return err
		}
	} else {
		buf.WriteString(`,"CHSqlCtx":null`)
	}
	buf.WriteString(`,"DDBSamplesTable":`)
	fflib.WriteJsonString(buf, string(j.DDBSamplesTable))
	buf.WriteString(`,"DDBTSTable":`)
	fflib.WriteJsonString(buf, string(j.DDBTSTable))
	buf.WriteString(`,"Step":`)
	fflib.FormatBits2(buf, uint64(j.Step), 10, j.Step < 0)
	buf.WriteString(`,"DeleteID":`)
	fflib.WriteJsonString(buf, string(j.DeleteID))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtPlannerContextbase = iota
	ffjtPlannerContextnosuchkey

	ffjtPlannerContextIsCluster

	ffjtPlannerContextOrgID

	ffjtPlannerContextFrom

	ffjtPlannerContextTo

	ffjtPlannerContextFromS

	ffjtPlannerContextToS

	ffjtPlannerContextOrderASC

	ffjtPlannerContextLimit

	ffjtPlannerContextTimeSeriesGinTableName

	ffjtPlannerContextSamplesTableName

	ffjtPlannerContextTimeSeriesTableName

	ffjtPlannerContextTimeSeriesDistTableName

	ffjtPlannerContextMetrics15sTableName

	ffjtPlannerContextTracesAttrsTable

	ffjtPlannerContextTracesAttrsDistTable

	ffjtPlannerContextTracesTable

	ffjtPlannerContextTracesDistTable

	ffjtPlannerContextUseCache

	ffjtPlannerContextCtx

	ffjtPlannerContextCancelCtx

	ffjtPlannerContextCHFinalize

	ffjtPlannerContextCHSqlCtx

	ffjtPlannerContextDDBSamplesTable

	ffjtPlannerContextDDBTSTable

	ffjtPlannerContextStep

	ffjtPlannerContextDeleteID
)

var ffjKeyPlannerContextIsCluster = []byte("IsCluster")

var ffjKeyPlannerContextOrgID = []byte("OrgID")

var ffjKeyPlannerContextFrom = []byte("From")

var ffjKeyPlannerContextTo = []byte("To")

var ffjKeyPlannerContextFromS = []byte("FromS")

var ffjKeyPlannerContextToS = []byte("ToS")

var ffjKeyPlannerContextOrderASC = []byte("OrderASC")

var ffjKeyPlannerContextLimit = []byte("Limit")

var ffjKeyPlannerContextTimeSeriesGinTableName = []byte("TimeSeriesGinTableName")

var ffjKeyPlannerContextSamplesTableName = []byte("SamplesTableName")

var ffjKeyPlannerContextTimeSeriesTableName = []byte("TimeSeriesTableName")

var ffjKeyPlannerContextTimeSeriesDistTableName = []byte("TimeSeriesDistTableName")

var ffjKeyPlannerContextMetrics15sTableName = []byte("Metrics15sTableName")

var ffjKeyPlannerContextTracesAttrsTable = []byte("TracesAttrsTable")

var ffjKeyPlannerContextTracesAttrsDistTable = []byte("TracesAttrsDistTable")

var ffjKeyPlannerContextTracesTable = []byte("TracesTable")

var ffjKeyPlannerContextTracesDistTable = []byte("TracesDistTable")

var ffjKeyPlannerContextUseCache = []byte("UseCache")

var ffjKeyPlannerContextCtx = []byte("Ctx")

var ffjKeyPlannerContextCancelCtx = []byte("CancelCtx")

var ffjKeyPlannerContextCHFinalize = []byte("CHFinalize")

var ffjKeyPlannerContextCHSqlCtx = []byte("CHSqlCtx")

var ffjKeyPlannerContextDDBSamplesTable = []byte("DDBSamplesTable")

var ffjKeyPlannerContextDDBTSTable = []byte("DDBTSTable")

var ffjKeyPlannerContextStep = []byte("Step")

var ffjKeyPlannerContextDeleteID = []byte("DeleteID")

// UnmarshalJSON umarshall json - template of ffjson
func (j *PlannerContext) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *PlannerContext) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtPlannerContextbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtPlannerContextnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffjKeyPlannerContextCtx, kn) {
						currentKey = ffjtPlannerContextCtx
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextCancelCtx, kn) {
						currentKey = ffjtPlannerContextCancelCtx
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextCHFinalize, kn) {
						currentKey = ffjtPlannerContextCHFinalize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextCHSqlCtx, kn) {
						currentKey = ffjtPlannerContextCHSqlCtx
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'D':

					if bytes.Equal(ffjKeyPlannerContextDDBSamplesTable, kn) {
						currentKey = ffjtPlannerContextDDBSamplesTable
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextDDBTSTable, kn) {
						currentKey = ffjtPlannerContextDDBTSTable
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextDeleteID, kn) {
						currentKey = ffjtPlannerContextDeleteID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'F':

					if bytes.Equal(ffjKeyPlannerContextFrom, kn) {
						currentKey = ffjtPlannerContextFrom
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextFromS, kn) {
						currentKey = ffjtPlannerContextFromS
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffjKeyPlannerContextIsCluster, kn) {
						currentKey = ffjtPlannerContextIsCluster
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'L':

					if bytes.Equal(ffjKeyPlannerContextLimit, kn) {
						currentKey = ffjtPlannerContextLimit
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'M':

					if bytes.Equal(ffjKeyPlannerContextMetrics15sTableName, kn) {
						currentKey = ffjtPlannerContextMetrics15sTableName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'O':

					if bytes.Equal(ffjKeyPlannerContextOrgID, kn) {
						currentKey = ffjtPlannerContextOrgID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextOrderASC, kn) {
						currentKey = ffjtPlannerContextOrderASC
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffjKeyPlannerContextSamplesTableName, kn) {
						currentKey = ffjtPlannerContextSamplesTableName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextStep, kn) {
						currentKey = ffjtPlannerContextStep
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeyPlannerContextTo, kn) {
						currentKey = ffjtPlannerContextTo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextToS, kn) {
						currentKey = ffjtPlannerContextToS
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextTimeSeriesGinTableName, kn) {
						currentKey = ffjtPlannerContextTimeSeriesGinTableName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextTimeSeriesTableName, kn) {
						currentKey = ffjtPlannerContextTimeSeriesTableName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextTimeSeriesDistTableName, kn) {
						currentKey = ffjtPlannerContextTimeSeriesDistTableName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextTracesAttrsTable, kn) {
						currentKey = ffjtPlannerContextTracesAttrsTable
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextTracesAttrsDistTable, kn) {
						currentKey = ffjtPlannerContextTracesAttrsDistTable
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextTracesTable, kn) {
						currentKey = ffjtPlannerContextTracesTable
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPlannerContextTracesDistTable, kn) {
						currentKey = ffjtPlannerContextTracesDistTable
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'U':

					if bytes.Equal(ffjKeyPlannerContextUseCache, kn) {
						currentKey = ffjtPlannerContextUseCache
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextDeleteID, kn) {
					currentKey = ffjtPlannerContextDeleteID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextStep, kn) {
					currentKey = ffjtPlannerContextStep
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextDDBTSTable, kn) {
					currentKey = ffjtPlannerContextDDBTSTable
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextDDBSamplesTable, kn) {
					currentKey = ffjtPlannerContextDDBSamplesTable
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextCHSqlCtx, kn) {
					currentKey = ffjtPlannerContextCHSqlCtx
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextCHFinalize, kn) {
					currentKey = ffjtPlannerContextCHFinalize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextCancelCtx, kn) {
					currentKey = ffjtPlannerContextCancelCtx
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextCtx, kn) {
					currentKey = ffjtPlannerContextCtx
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextUseCache, kn) {
					currentKey = ffjtPlannerContextUseCache
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextTracesDistTable, kn) {
					currentKey = ffjtPlannerContextTracesDistTable
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextTracesTable, kn) {
					currentKey = ffjtPlannerContextTracesTable
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextTracesAttrsDistTable, kn) {
					currentKey = ffjtPlannerContextTracesAttrsDistTable
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextTracesAttrsTable, kn) {
					currentKey = ffjtPlannerContextTracesAttrsTable
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextMetrics15sTableName, kn) {
					currentKey = ffjtPlannerContextMetrics15sTableName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextTimeSeriesDistTableName, kn) {
					currentKey = ffjtPlannerContextTimeSeriesDistTableName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextTimeSeriesTableName, kn) {
					currentKey = ffjtPlannerContextTimeSeriesTableName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextSamplesTableName, kn) {
					currentKey = ffjtPlannerContextSamplesTableName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextTimeSeriesGinTableName, kn) {
					currentKey = ffjtPlannerContextTimeSeriesGinTableName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextLimit, kn) {
					currentKey = ffjtPlannerContextLimit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextOrderASC, kn) {
					currentKey = ffjtPlannerContextOrderASC
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextToS, kn) {
					currentKey = ffjtPlannerContextToS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextFromS, kn) {
					currentKey = ffjtPlannerContextFromS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextTo, kn) {
					currentKey = ffjtPlannerContextTo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextFrom, kn) {
					currentKey = ffjtPlannerContextFrom
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPlannerContextOrgID, kn) {
					currentKey = ffjtPlannerContextOrgID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPlannerContextIsCluster, kn) {
					currentKey = ffjtPlannerContextIsCluster
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtPlannerContextnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtPlannerContextIsCluster:
					goto handle_IsCluster

				case ffjtPlannerContextOrgID:
					goto handle_OrgID

				case ffjtPlannerContextFrom:
					goto handle_From

				case ffjtPlannerContextTo:
					goto handle_To

				case ffjtPlannerContextFromS:
					goto handle_FromS

				case ffjtPlannerContextToS:
					goto handle_ToS

				case ffjtPlannerContextOrderASC:
					goto handle_OrderASC

				case ffjtPlannerContextLimit:
					goto handle_Limit

				case ffjtPlannerContextTimeSeriesGinTableName:
					goto handle_TimeSeriesGinTableName

				case ffjtPlannerContextSamplesTableName:
					goto handle_SamplesTableName

				case ffjtPlannerContextTimeSeriesTableName:
					goto handle_TimeSeriesTableName

				case ffjtPlannerContextTimeSeriesDistTableName:
					goto handle_TimeSeriesDistTableName

				case ffjtPlannerContextMetrics15sTableName:
					goto handle_Metrics15sTableName

				case ffjtPlannerContextTracesAttrsTable:
					goto handle_TracesAttrsTable

				case ffjtPlannerContextTracesAttrsDistTable:
					goto handle_TracesAttrsDistTable

				case ffjtPlannerContextTracesTable:
					goto handle_TracesTable

				case ffjtPlannerContextTracesDistTable:
					goto handle_TracesDistTable

				case ffjtPlannerContextUseCache:
					goto handle_UseCache

				case ffjtPlannerContextCtx:
					goto handle_Ctx

				case ffjtPlannerContextCancelCtx:
					goto handle_CancelCtx

				case ffjtPlannerContextCHFinalize:
					goto handle_CHFinalize

				case ffjtPlannerContextCHSqlCtx:
					goto handle_CHSqlCtx

				case ffjtPlannerContextDDBSamplesTable:
					goto handle_DDBSamplesTable

				case ffjtPlannerContextDDBTSTable:
					goto handle_DDBTSTable

				case ffjtPlannerContextStep:
					goto handle_Step

				case ffjtPlannerContextDeleteID:
					goto handle_DeleteID

				case ffjtPlannerContextnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_IsCluster:

	/* handler: j.IsCluster type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.IsCluster = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.IsCluster = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrgID:

	/* handler: j.OrgID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OrgID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_From:

	/* handler: j.From type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.From.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_To:

	/* handler: j.To type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.To.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FromS:

	/* handler: j.FromS type=int32 kind=int32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.FromS = int32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ToS:

	/* handler: j.ToS type=int32 kind=int32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.ToS = int32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderASC:

	/* handler: j.OrderASC type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.OrderASC = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.OrderASC = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Limit:

	/* handler: j.Limit type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Limit = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TimeSeriesGinTableName:

	/* handler: j.TimeSeriesGinTableName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TimeSeriesGinTableName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SamplesTableName:

	/* handler: j.SamplesTableName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SamplesTableName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TimeSeriesTableName:

	/* handler: j.TimeSeriesTableName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TimeSeriesTableName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TimeSeriesDistTableName:

	/* handler: j.TimeSeriesDistTableName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TimeSeriesDistTableName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Metrics15sTableName:

	/* handler: j.Metrics15sTableName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Metrics15sTableName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TracesAttrsTable:

	/* handler: j.TracesAttrsTable type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TracesAttrsTable = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TracesAttrsDistTable:

	/* handler: j.TracesAttrsDistTable type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TracesAttrsDistTable = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TracesTable:

	/* handler: j.TracesTable type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TracesTable = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TracesDistTable:

	/* handler: j.TracesDistTable type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TracesDistTable = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UseCache:

	/* handler: j.UseCache type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.UseCache = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.UseCache = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ctx:

	/* handler: j.Ctx type=context.Context kind=interface quoted=false*/

	{
		/* Falling back. type=context.Context kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Ctx)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CancelCtx:

	/* handler: j.CancelCtx type=context.CancelFunc kind=func quoted=false*/

	{
		/* Falling back. type=context.CancelFunc kind=func */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.CancelCtx)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CHFinalize:

	/* handler: j.CHFinalize type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.CHFinalize = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.CHFinalize = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CHSqlCtx:

	/* handler: j.CHSqlCtx type=sql.Ctx kind=struct quoted=false*/

	{
		/* Falling back. type=sql.Ctx kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.CHSqlCtx)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DDBSamplesTable:

	/* handler: j.DDBSamplesTable type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.DDBSamplesTable = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DDBTSTable:

	/* handler: j.DDBTSTable type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.DDBTSTable = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Step:

	/* handler: j.Step type=time.Duration kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Duration", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Step = time.Duration(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DeleteID:

	/* handler: j.DeleteID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.DeleteID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

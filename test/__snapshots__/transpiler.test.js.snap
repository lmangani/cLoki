// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shoud transpile unwrap 1`] = `
Object {
  "ctx": Object {
    "duration": 60000,
    "step": 120000,
  },
  "from": "uw_rate_b",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": Array [
      "labels",
      "timestamp_ms",
    ],
    "order": "asc",
  },
  "select": Array [
    "labels",
    "floor(uw_rate_b.timestamp_ms / 120000) * 120000 as timestamp_ms",
    "argMax(value,timestamp_ms) as value",
  ],
  "stream": undefined,
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'test_id')",
        "JSONExtractString(labels, 'test_id') = '0.7857680014573265_json'",
      ],
    },
    "uw_rate_a": Object {
      "ctx": undefined,
      "distinct": true,
      "from": "loki.samples",
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "matrix": undefined,
      "order_by": Object {
        "name": Array [
          "timestamp_ms",
          "labels",
        ],
        "order": "desc",
      },
      "select": Array [
        "time_series.labels as labels",
        "samples.string as string",
        "time_series.fingerprint as fingerprint",
        "samples.timestamp_ms as timestamp_ms",
        "toFloat64OrNull(JSONExtractString(labels,'int_lbl')) as unwrapped",
      ],
      "stream": undefined,
      "where": Array [
        "AND",
        "samples.fingerprint IN str_sel",
        "JSONHas(labels, 'int_lbl')",
        "isNotNull(unwrapped)",
      ],
      "with": undefined,
    },
    "uw_rate_b": Object {
      "from": "uw_rate_a",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "arraySort(arrayFilter(x -> arrayExists(y -> x.1 == y, ['fmt']) != 0, JSONExtractKeysAndValues(labels, 'String'))) as labels",
        "floor(timestamp_ms / 60000) * 60000 as timestamp_ms",
        "SUM(unwrapped) / 60 as value",
      ],
    },
  },
}
`;

exports[`shoud transpile unwrap 2`] = `
Object {
  "ctx": Object {
    "duration": 60000,
    "step": 120000,
  },
  "from": "uw_rate_b",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": Array [
      "labels",
      "timestamp_ms",
    ],
    "order": "asc",
  },
  "select": Array [
    "labels",
    "floor(uw_rate_b.timestamp_ms / 120000) * 120000 as timestamp_ms",
    "argMax(value,timestamp_ms) as value",
  ],
  "stream": undefined,
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'test_id')",
        "JSONExtractString(labels, 'test_id') = '0.7857680014573265_json'",
      ],
    },
    "uw_rate_a": Object {
      "ctx": undefined,
      "distinct": true,
      "from": "loki.samples",
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "matrix": undefined,
      "order_by": Object {
        "name": Array [
          "timestamp_ms",
          "labels",
        ],
        "order": "desc",
      },
      "select": Array [
        "time_series.labels as labels",
        "samples.string as string",
        "time_series.fingerprint as fingerprint",
        "samples.timestamp_ms as timestamp_ms",
        "arrayFilter((x) -> x.2 != '', [('int_lbl2', if(JSONType(samples.string, 'int_val') == 'String', JSONExtractString(samples.string, 'int_val'), JSONExtractRaw(samples.string, 'int_val')))]) as extra_labels",
        "toFloat64OrNull(if(arrayExists(x -> x.1 == 'int_lbl2', extra_labels), arrayFirst(x -> x.1 == 'int_lbl2', extra_labels).2, JSONExtractString(labels,'int_lbl2'))) as unwrapped",
      ],
      "stream": undefined,
      "where": Array [
        "AND",
        "samples.fingerprint IN str_sel",
        "isValidJSON(samples.string)",
        Array [
          "OR",
          "arrayFirstIndex(x -> x.1 == 'int_lbl2', extra_labels) != 0",
          "JSONHas(labels, 'int_lbl2')",
        ],
        "isNotNull(unwrapped)",
      ],
      "with": undefined,
    },
    "uw_rate_b": Object {
      "from": "uw_rate_a",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "arraySort(arrayFilter(x -> arrayExists(y -> x.1 == y, ['fmt']) != 0, arraySort(arrayConcat(arrayFilter(x -> arrayExists(y -> y.1 == x.1, extra_labels) == 0, JSONExtractKeysAndValues(labels, 'String')), extra_labels)))) as labels",
        "floor(timestamp_ms / 60000) * 60000 as timestamp_ms",
        "SUM(unwrapped) / 60 as value",
      ],
    },
  },
}
`;

exports[`shoud transpile unwrap 3`] = `
Object {
  "ctx": Object {
    "duration": 60000,
    "step": 120000,
  },
  "from": "uw_rate_b",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": Array [
      "labels",
      "timestamp_ms",
    ],
    "order": "asc",
  },
  "select": Array [
    "labels",
    "floor(uw_rate_b.timestamp_ms / 120000) * 120000 as timestamp_ms",
    "argMax(value,timestamp_ms) as value",
  ],
  "stream": undefined,
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'test_id')",
        "JSONExtractString(labels, 'test_id') = '0.7857680014573265_json'",
      ],
    },
    "uw_rate_a": Object {
      "ctx": undefined,
      "distinct": true,
      "from": "loki.samples",
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "matrix": undefined,
      "order_by": Object {
        "name": Array [
          "timestamp_ms",
          "labels",
        ],
        "order": "desc",
      },
      "select": Array [
        "time_series.labels as labels",
        "samples.string as string",
        "time_series.fingerprint as fingerprint",
        "samples.timestamp_ms as timestamp_ms",
        "arrayFilter((x) -> x.2 != '', [('int_lbl2', if(JSONType(samples.string, 'int_val') == 'String', JSONExtractString(samples.string, 'int_val'), JSONExtractRaw(samples.string, 'int_val')))]) as extra_labels",
        "toFloat64OrNull(if(arrayExists(x -> x.1 == 'int_lbl', extra_labels), arrayFirst(x -> x.1 == 'int_lbl', extra_labels).2, JSONExtractString(labels,'int_lbl'))) as unwrapped",
      ],
      "stream": undefined,
      "where": Array [
        "AND",
        "samples.fingerprint IN str_sel",
        "isValidJSON(samples.string)",
        Array [
          "OR",
          "arrayFirstIndex(x -> x.1 == 'int_lbl', extra_labels) != 0",
          "JSONHas(labels, 'int_lbl')",
        ],
        "isNotNull(unwrapped)",
      ],
      "with": undefined,
    },
    "uw_rate_b": Object {
      "from": "uw_rate_a",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "arraySort(arrayFilter(x -> arrayExists(y -> x.1 == y, ['int_lbl2']) != 0, arraySort(arrayConcat(arrayFilter(x -> arrayExists(y -> y.1 == x.1, extra_labels) == 0, JSONExtractKeysAndValues(labels, 'String')), extra_labels)))) as labels",
        "floor(timestamp_ms / 60000) * 60000 as timestamp_ms",
        "SUM(unwrapped) / 60 as value",
      ],
    },
  },
}
`;

exports[`should transpile aggregation_operator 1`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "agg_a",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": Array [
      "labels",
      "timestamp_ms",
    ],
    "order": "asc",
  },
  "select": Array [
    "arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValues(labels, 'String')) as labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "agg_a": Object {
      "ctx": undefined,
      "from": "rate_b",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "matrix": true,
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "labels",
        "timestamp_ms",
        "sum(value) as value",
      ],
      "with": undefined,
    },
    "rate_a": Object {
      "ctx": undefined,
      "distinct": true,
      "from": "loki.samples",
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "order_by": Object {
        "name": Array [
          "timestamp_ms",
          "labels",
        ],
        "order": "desc",
      },
      "select": Array [
        "time_series.labels as labels",
        "samples.string as string",
        "time_series.fingerprint as fingerprint",
        "samples.timestamp_ms as timestamp_ms",
      ],
      "where": Array [
        "AND",
        "samples.fingerprint IN str_sel",
      ],
      "with": undefined,
    },
    "rate_b": Object {
      "from": "rate_a",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "labels",
        "floor(timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
    },
    "rate_c": undefined,
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'minus_nam')",
        "JSONExtractString(labels, 'minus_nam') = 'aut illo'",
      ],
    },
  },
}
`;

exports[`should transpile aggregation_operator 2`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'minus_nam') AND JSONExtractString(labels, 'minus_nam') = 'aut illo' ), rate_a as ( SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel  ORDER BY timestamp_ms desc, labels desc ), rate_b as ( SELECT  labels, floor(timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM rate_a  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc ), agg_a as ( SELECT  labels, timestamp_ms, sum(value) as value FROM rate_b  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc ) SELECT  arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValues(labels, 'String')) as labels, timestamp_ms, sum(value) as value FROM agg_a  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc "`;

exports[`should transpile aggregation_operator 3`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "agg_a",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": Array [
      "labels",
      "timestamp_ms",
    ],
    "order": "asc",
  },
  "select": Array [
    "arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValues(labels, 'String')) as labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "agg_a": Object {
      "ctx": undefined,
      "from": "rate_b",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "matrix": true,
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "labels",
        "timestamp_ms",
        "sum(value) as value",
      ],
      "with": undefined,
    },
    "rate_a": Object {
      "ctx": undefined,
      "distinct": true,
      "from": "loki.samples",
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "order_by": Object {
        "name": Array [
          "timestamp_ms",
          "labels",
        ],
        "order": "desc",
      },
      "select": Array [
        "time_series.labels as labels",
        "samples.string as string",
        "time_series.fingerprint as fingerprint",
        "samples.timestamp_ms as timestamp_ms",
      ],
      "where": Array [
        "AND",
        "samples.fingerprint IN str_sel",
        "position(string, 'consequatur nam soluta') == 0",
      ],
      "with": undefined,
    },
    "rate_b": Object {
      "from": "rate_a",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "labels",
        "floor(timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
    },
    "rate_c": undefined,
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
      ],
    },
  },
}
`;

exports[`should transpile aggregation_operator 4`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] ), rate_a as ( SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND position(string, 'consequatur nam soluta') == 0  ORDER BY timestamp_ms desc, labels desc ), rate_b as ( SELECT  labels, floor(timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM rate_a  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc ), agg_a as ( SELECT  labels, timestamp_ms, sum(value) as value FROM rate_b  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc ) SELECT  arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValues(labels, 'String')) as labels, timestamp_ms, sum(value) as value FROM agg_a  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc "`;

exports[`should transpile aggregation_operator 5`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "agg_a",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": Array [
      "labels",
      "timestamp_ms",
    ],
    "order": "asc",
  },
  "select": Array [
    "arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValues(labels, 'String')) as labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "agg_a": Object {
      "ctx": undefined,
      "from": "rate_b",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "matrix": true,
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "labels",
        "timestamp_ms",
        "sum(value) as value",
      ],
      "with": undefined,
    },
    "rate_a": Object {
      "ctx": undefined,
      "distinct": true,
      "from": "loki.samples",
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "order_by": Object {
        "name": Array [
          "timestamp_ms",
          "labels",
        ],
        "order": "desc",
      },
      "select": Array [
        "time_series.labels as labels",
        "samples.string as string",
        "time_series.fingerprint as fingerprint",
        "samples.timestamp_ms as timestamp_ms",
      ],
      "where": Array [
        "AND",
        "samples.fingerprint IN str_sel",
      ],
      "with": undefined,
    },
    "rate_b": Object {
      "from": "rate_a",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "labels",
        "floor(timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
    },
    "rate_c": undefined,
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'minus_nam')",
        "JSONExtractString(labels, 'minus_nam') = 'aut illo'",
      ],
    },
  },
}
`;

exports[`should transpile aggregation_operator 6`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'minus_nam') AND JSONExtractString(labels, 'minus_nam') = 'aut illo' ), rate_a as ( SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel  ORDER BY timestamp_ms desc, labels desc ), rate_b as ( SELECT  labels, floor(timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM rate_a  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc ), agg_a as ( SELECT  labels, timestamp_ms, sum(value) as value FROM rate_b  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc ) SELECT  arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValues(labels, 'String')) as labels, timestamp_ms, sum(value) as value FROM agg_a  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc "`;

exports[`should transpile json requests 1`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
    "arrayFilter((x) -> x.2 != '', [('odit_iusto', if(JSONType(samples.string, 'dicta') == 'String', JSONExtractString(samples.string, 'dicta'), JSONExtractRaw(samples.string, 'dicta')))]) as extra_labels",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "isValidJSON(samples.string)",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'autem_quis')",
        "JSONExtractString(labels, 'autem_quis') = 'quidem sit'",
      ],
    },
  },
}
`;

exports[`should transpile json requests 2`] = `
Array [
  Object {
    "labels": Object {
      "autem_quis": "quidem sit",
      "l1": "v3",
      "l2": "v2",
      "l3": "v4",
    },
    "string": "{\\"l1\\":\\"v3\\",\\"l3\\":\\"v4\\"}",
  },
]
`;

exports[`should transpile line format 1`] = `
Array [
  Object {
    "labels": Object {
      "int": 10,
      "lbl1": "a",
    },
    "string": "str a 5",
  },
]
`;

exports[`should transpile line format 2`] = `
Array [
  Object {
    "labels": Object {
      "entry": "str",
      "int": 10,
      "intval": "5",
      "lbl1": "a",
    },
    "string": "{ \\"entry\\": \\"str\\", \\"intval\\": 5 }",
  },
]
`;

exports[`should transpile line format 3`] = `
Array [
  Object {
    "labels": Object {
      "entry": "str",
      "int": 10,
      "intval": "5",
      "lbl1": "a",
    },
    "timestamp_ms": "0",
    "value": 5,
  },
  Object {
    "EOF": true,
  },
]
`;

exports[`should transpile log_range_aggregation 1`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "rate_b",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": Array [
      "labels",
      "timestamp_ms",
    ],
    "order": "asc",
  },
  "select": Array [
    "labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "rate_a": Object {
      "ctx": undefined,
      "distinct": true,
      "from": "loki.samples",
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "order_by": Object {
        "name": Array [
          "timestamp_ms",
          "labels",
        ],
        "order": "desc",
      },
      "select": Array [
        "time_series.labels as labels",
        "samples.string as string",
        "time_series.fingerprint as fingerprint",
        "samples.timestamp_ms as timestamp_ms",
      ],
      "where": Array [
        "AND",
        "samples.fingerprint IN str_sel",
      ],
      "with": undefined,
    },
    "rate_b": Object {
      "from": "rate_a",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "order_by": Object {
        "name": Array [
          "labels",
          "timestamp_ms",
        ],
        "order": "asc",
      },
      "select": Array [
        "labels",
        "floor(timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
    },
    "rate_c": undefined,
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'minus_nam')",
        "JSONExtractString(labels, 'minus_nam') = 'aut illo'",
      ],
    },
  },
}
`;

exports[`should transpile log_range_aggregation 2`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'minus_nam') AND JSONExtractString(labels, 'minus_nam') = 'aut illo' ), rate_a as ( SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel  ORDER BY timestamp_ms desc, labels desc ), rate_b as ( SELECT  labels, floor(timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM rate_a  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc ) SELECT  labels, timestamp_ms, sum(value) as value FROM rate_b  GROUP BY labels, timestamp_ms ORDER BY labels asc, timestamp_ms asc "`;

exports[`should transpile log_range_aggregation 3`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "position(string, 'consequatur nam soluta') == 0",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
      ],
    },
  },
}
`;

exports[`should transpile log_range_aggregation 4`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND position(string, 'consequatur nam soluta') == 0  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_range_aggregation 5`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'et_dolorem')",
        "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
      ],
    },
  },
}
`;

exports[`should transpile log_range_aggregation 6`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque' ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_range_aggregation 7`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
      ],
    },
  },
}
`;

exports[`should transpile log_range_aggregation 8`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == [] ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 1`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'et_dolorem')",
        "JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque'",
        "JSONHas(labels, 'quia')",
        "JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector 2`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque' AND JSONHas(labels, 'quia') AND JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi' ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 3`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector 4`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 5`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'et_dolorem')",
        "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector 6`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque' ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 7`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector 8`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == [] ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 1`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "position(string, 'at et') != 0",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'et_dolorem')",
        "JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque'",
        "JSONHas(labels, 'quia')",
        "JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector with stream filter 2`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque' AND JSONHas(labels, 'quia') AND JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi' ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND position(string, 'at et') != 0  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 3`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "position(string, 'consequatur nam soluta') == 0",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector with stream filter 4`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND position(string, 'consequatur nam soluta') == 0  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 5`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'et_dolorem')",
        "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector with stream filter 6`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque' ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 7`] = `
Object {
  "distinct": true,
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": Array [
      "timestamp_ms",
      "labels",
    ],
    "order": "desc",
  },
  "select": Array [
    "time_series.labels as labels",
    "samples.string as string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "samples.fingerprint IN str_sel",
    "extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []",
  ],
  "with": Object {
    "str_sel": Object {
      "from": "loki.time_series",
      "select": Array [
        "fingerprint",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
      ],
    },
  },
}
`;

exports[`should transpile log_stream_selector with stream filter 8`] = `"WITH str_sel as ( SELECT  fingerprint FROM loki.time_series  WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == [] ) SELECT DISTINCT time_series.labels as labels, samples.string as string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE samples.fingerprint IN str_sel AND extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []  ORDER BY timestamp_ms desc, labels desc  LIMIT 1000"`;

exports[`should transpile plugins 1`] = `
Array [
  Object {
    "labels": Object {
      "lbl1": "a",
    },
    "timestamp_ms": "0",
    "value": 10,
  },
  Object {
    "EOF": true,
  },
]
`;
